// Code generated by protoc-gen-go. DO NOT EDIT.
// source: calc.proto

package calc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ReqPercent struct {
	Val                  []float32 `protobuf:"fixed32,1,rep,packed,name=val,proto3" json:"val,omitempty"`
	Percent              float32   `protobuf:"fixed32,2,opt,name=percent,proto3" json:"percent,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ReqPercent) Reset()         { *m = ReqPercent{} }
func (m *ReqPercent) String() string { return proto.CompactTextString(m) }
func (*ReqPercent) ProtoMessage()    {}
func (*ReqPercent) Descriptor() ([]byte, []int) {
	return fileDescriptor_calc_4d974ae2c7f1e7f5, []int{0}
}
func (m *ReqPercent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqPercent.Unmarshal(m, b)
}
func (m *ReqPercent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqPercent.Marshal(b, m, deterministic)
}
func (dst *ReqPercent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqPercent.Merge(dst, src)
}
func (m *ReqPercent) XXX_Size() int {
	return xxx_messageInfo_ReqPercent.Size(m)
}
func (m *ReqPercent) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqPercent.DiscardUnknown(m)
}

var xxx_messageInfo_ReqPercent proto.InternalMessageInfo

func (m *ReqPercent) GetVal() []float32 {
	if m != nil {
		return m.Val
	}
	return nil
}

func (m *ReqPercent) GetPercent() float32 {
	if m != nil {
		return m.Percent
	}
	return 0
}

type ResPercent struct {
	Val                  []float32 `protobuf:"fixed32,1,rep,packed,name=val,proto3" json:"val,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ResPercent) Reset()         { *m = ResPercent{} }
func (m *ResPercent) String() string { return proto.CompactTextString(m) }
func (*ResPercent) ProtoMessage()    {}
func (*ResPercent) Descriptor() ([]byte, []int) {
	return fileDescriptor_calc_4d974ae2c7f1e7f5, []int{1}
}
func (m *ResPercent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResPercent.Unmarshal(m, b)
}
func (m *ResPercent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResPercent.Marshal(b, m, deterministic)
}
func (dst *ResPercent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResPercent.Merge(dst, src)
}
func (m *ResPercent) XXX_Size() int {
	return xxx_messageInfo_ResPercent.Size(m)
}
func (m *ResPercent) XXX_DiscardUnknown() {
	xxx_messageInfo_ResPercent.DiscardUnknown(m)
}

var xxx_messageInfo_ResPercent proto.InternalMessageInfo

func (m *ResPercent) GetVal() []float32 {
	if m != nil {
		return m.Val
	}
	return nil
}

func init() {
	proto.RegisterType((*ReqPercent)(nil), "calc.ReqPercent")
	proto.RegisterType((*ResPercent)(nil), "calc.ResPercent")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CalcClient is the client API for Calc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CalcClient interface {
	Percent(ctx context.Context, in *ReqPercent, opts ...grpc.CallOption) (*ResPercent, error)
}

type calcClient struct {
	cc *grpc.ClientConn
}

func NewCalcClient(cc *grpc.ClientConn) CalcClient {
	return &calcClient{cc}
}

func (c *calcClient) Percent(ctx context.Context, in *ReqPercent, opts ...grpc.CallOption) (*ResPercent, error) {
	out := new(ResPercent)
	err := c.cc.Invoke(ctx, "/calc.Calc/Percent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalcServer is the server API for Calc service.
type CalcServer interface {
	Percent(context.Context, *ReqPercent) (*ResPercent, error)
}

func RegisterCalcServer(s *grpc.Server, srv CalcServer) {
	s.RegisterService(&_Calc_serviceDesc, srv)
}

func _Calc_Percent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqPercent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalcServer).Percent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calc.Calc/Percent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalcServer).Percent(ctx, req.(*ReqPercent))
	}
	return interceptor(ctx, in, info, handler)
}

var _Calc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "calc.Calc",
	HandlerType: (*CalcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Percent",
			Handler:    _Calc_Percent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calc.proto",
}

func init() { proto.RegisterFile("calc.proto", fileDescriptor_calc_4d974ae2c7f1e7f5) }

var fileDescriptor_calc_4d974ae2c7f1e7f5 = []byte{
	// 167 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x4e, 0xcc, 0x49,
	0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0xa5, 0x64, 0xd2, 0xf3, 0xf3, 0xd3,
	0x73, 0x52, 0xf5, 0x13, 0x0b, 0x32, 0xf5, 0x13, 0xf3, 0xf2, 0xf2, 0x4b, 0x12, 0x4b, 0x32, 0xf3,
	0xf3, 0x8a, 0x21, 0x6a, 0x94, 0x2c, 0xb8, 0xb8, 0x82, 0x52, 0x0b, 0x03, 0x52, 0x8b, 0x92, 0x53,
	0xf3, 0x4a, 0x84, 0x04, 0xb8, 0x98, 0xcb, 0x12, 0x73, 0x24, 0x18, 0x15, 0x98, 0x35, 0x98, 0x82,
	0x40, 0x4c, 0x21, 0x09, 0x2e, 0xf6, 0x02, 0x88, 0xa4, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x53, 0x10,
	0x8c, 0xab, 0x24, 0x07, 0xd2, 0x59, 0x8c, 0x53, 0xa7, 0x91, 0x3f, 0x17, 0x8b, 0x73, 0x62, 0x4e,
	0xb2, 0x90, 0x3b, 0x17, 0x3b, 0x5c, 0x91, 0x1e, 0xd8, 0x75, 0x08, 0x0b, 0xa5, 0xe0, 0x22, 0x30,
	0x83, 0x94, 0x24, 0x9a, 0x2e, 0x3f, 0x99, 0xcc, 0x24, 0xa4, 0xc4, 0xab, 0x0f, 0x92, 0xd1, 0x87,
	0xda, 0x66, 0xc5, 0xa8, 0x95, 0xc4, 0x06, 0x76, 0xb1, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xf0,
	0x2e, 0xd4, 0xc2, 0xe3, 0x00, 0x00, 0x00,
}
