// Code generated by mockery v1.0.0. DO NOT EDIT.
package grpc

import context "context"
import mock "github.com/stretchr/testify/mock"

// MockBalancer is an autogenerated mock type for the Balancer type
type MockBalancer struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *MockBalancer) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, opts
func (_m *MockBalancer) Get(ctx context.Context, opts BalancerGetOptions) (Address, func(), error) {
	ret := _m.Called(ctx, opts)

	var r0 Address
	if rf, ok := ret.Get(0).(func(context.Context, BalancerGetOptions) Address); ok {
		r0 = rf(ctx, opts)
	} else {
		r0 = ret.Get(0).(Address)
	}

	var r1 func()
	if rf, ok := ret.Get(1).(func(context.Context, BalancerGetOptions) func()); ok {
		r1 = rf(ctx, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(func())
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, BalancerGetOptions) error); ok {
		r2 = rf(ctx, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Notify provides a mock function with given fields:
func (_m *MockBalancer) Notify() <-chan []Address {
	ret := _m.Called()

	var r0 <-chan []Address
	if rf, ok := ret.Get(0).(func() <-chan []Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan []Address)
		}
	}

	return r0
}

// Start provides a mock function with given fields: target, config
func (_m *MockBalancer) Start(target string, config BalancerConfig) error {
	ret := _m.Called(target, config)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, BalancerConfig) error); ok {
		r0 = rf(target, config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Up provides a mock function with given fields: addr
func (_m *MockBalancer) Up(addr Address) func(error) {
	ret := _m.Called(addr)

	var r0 func(error)
	if rf, ok := ret.Get(0).(func(Address) func(error)); ok {
		r0 = rf(addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(error))
		}
	}

	return r0
}
