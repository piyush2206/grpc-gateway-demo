// Code generated by mockery v1.0.0. DO NOT EDIT.
package transport

import context "context"
import mock "github.com/stretchr/testify/mock"

// MockClientTransport is an autogenerated mock type for the ClientTransport type
type MockClientTransport struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *MockClientTransport) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CloseStream provides a mock function with given fields: stream, err
func (_m *MockClientTransport) CloseStream(stream *Stream, err error) {
	_m.Called(stream, err)
}

// Error provides a mock function with given fields:
func (_m *MockClientTransport) Error() <-chan struct{} {
	ret := _m.Called()

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// GetGoAwayReason provides a mock function with given fields:
func (_m *MockClientTransport) GetGoAwayReason() GoAwayReason {
	ret := _m.Called()

	var r0 GoAwayReason
	if rf, ok := ret.Get(0).(func() GoAwayReason); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(GoAwayReason)
	}

	return r0
}

// GoAway provides a mock function with given fields:
func (_m *MockClientTransport) GoAway() <-chan struct{} {
	ret := _m.Called()

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// GracefulClose provides a mock function with given fields:
func (_m *MockClientTransport) GracefulClose() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IncrMsgRecv provides a mock function with given fields:
func (_m *MockClientTransport) IncrMsgRecv() {
	_m.Called()
}

// IncrMsgSent provides a mock function with given fields:
func (_m *MockClientTransport) IncrMsgSent() {
	_m.Called()
}

// NewStream provides a mock function with given fields: ctx, callHdr
func (_m *MockClientTransport) NewStream(ctx context.Context, callHdr *CallHdr) (*Stream, error) {
	ret := _m.Called(ctx, callHdr)

	var r0 *Stream
	if rf, ok := ret.Get(0).(func(context.Context, *CallHdr) *Stream); ok {
		r0 = rf(ctx, callHdr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Stream)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *CallHdr) error); ok {
		r1 = rf(ctx, callHdr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Write provides a mock function with given fields: s, hdr, data, opts
func (_m *MockClientTransport) Write(s *Stream, hdr []byte, data []byte, opts *Options) error {
	ret := _m.Called(s, hdr, data, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(*Stream, []byte, []byte, *Options) error); ok {
		r0 = rf(s, hdr, data, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
