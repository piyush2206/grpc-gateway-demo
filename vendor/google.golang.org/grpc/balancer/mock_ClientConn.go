// Code generated by mockery v1.0.0. DO NOT EDIT.
package balancer

import connectivity "google.golang.org/grpc/connectivity"
import mock "github.com/stretchr/testify/mock"
import resolver "google.golang.org/grpc/resolver"

// MockClientConn is an autogenerated mock type for the ClientConn type
type MockClientConn struct {
	mock.Mock
}

// NewSubConn provides a mock function with given fields: _a0, _a1
func (_m *MockClientConn) NewSubConn(_a0 []resolver.Address, _a1 NewSubConnOptions) (SubConn, error) {
	ret := _m.Called(_a0, _a1)

	var r0 SubConn
	if rf, ok := ret.Get(0).(func([]resolver.Address, NewSubConnOptions) SubConn); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(SubConn)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]resolver.Address, NewSubConnOptions) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveSubConn provides a mock function with given fields: _a0
func (_m *MockClientConn) RemoveSubConn(_a0 SubConn) {
	_m.Called(_a0)
}

// ResolveNow provides a mock function with given fields: _a0
func (_m *MockClientConn) ResolveNow(_a0 resolver.ResolveNowOption) {
	_m.Called(_a0)
}

// Target provides a mock function with given fields:
func (_m *MockClientConn) Target() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// UpdateBalancerState provides a mock function with given fields: s, p
func (_m *MockClientConn) UpdateBalancerState(s connectivity.State, p Picker) {
	_m.Called(s, p)
}
