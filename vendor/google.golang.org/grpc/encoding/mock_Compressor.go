// Code generated by mockery v1.0.0. DO NOT EDIT.
package encoding

import io "io"
import mock "github.com/stretchr/testify/mock"

// MockCompressor is an autogenerated mock type for the Compressor type
type MockCompressor struct {
	mock.Mock
}

// Compress provides a mock function with given fields: w
func (_m *MockCompressor) Compress(w io.Writer) (io.WriteCloser, error) {
	ret := _m.Called(w)

	var r0 io.WriteCloser
	if rf, ok := ret.Get(0).(func(io.Writer) io.WriteCloser); ok {
		r0 = rf(w)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.WriteCloser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(io.Writer) error); ok {
		r1 = rf(w)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Decompress provides a mock function with given fields: r
func (_m *MockCompressor) Decompress(r io.Reader) (io.Reader, error) {
	ret := _m.Called(r)

	var r0 io.Reader
	if rf, ok := ret.Get(0).(func(io.Reader) io.Reader); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Reader)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(io.Reader) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Name provides a mock function with given fields:
func (_m *MockCompressor) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
