// Code generated by mockery v1.0.0. DO NOT EDIT.
package colltab

import mock "github.com/stretchr/testify/mock"

// MockWeighter is an autogenerated mock type for the Weighter type
type MockWeighter struct {
	mock.Mock
}

// AppendNext provides a mock function with given fields: buf, s
func (_m *MockWeighter) AppendNext(buf []Elem, s []byte) ([]Elem, int) {
	ret := _m.Called(buf, s)

	var r0 []Elem
	if rf, ok := ret.Get(0).(func([]Elem, []byte) []Elem); ok {
		r0 = rf(buf, s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Elem)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func([]Elem, []byte) int); ok {
		r1 = rf(buf, s)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// AppendNextString provides a mock function with given fields: buf, s
func (_m *MockWeighter) AppendNextString(buf []Elem, s string) ([]Elem, int) {
	ret := _m.Called(buf, s)

	var r0 []Elem
	if rf, ok := ret.Get(0).(func([]Elem, string) []Elem); ok {
		r0 = rf(buf, s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Elem)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func([]Elem, string) int); ok {
		r1 = rf(buf, s)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// Domain provides a mock function with given fields:
func (_m *MockWeighter) Domain() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Start provides a mock function with given fields: p, b
func (_m *MockWeighter) Start(p int, b []byte) int {
	ret := _m.Called(p, b)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, []byte) int); ok {
		r0 = rf(p, b)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// StartString provides a mock function with given fields: p, s
func (_m *MockWeighter) StartString(p int, s string) int {
	ret := _m.Called(p, s)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, string) int); ok {
		r0 = rf(p, s)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Top provides a mock function with given fields:
func (_m *MockWeighter) Top() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}
