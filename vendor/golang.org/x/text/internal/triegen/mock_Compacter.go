// Code generated by mockery v1.0.0. DO NOT EDIT.
package triegen

import io "io"
import mock "github.com/stretchr/testify/mock"

// MockCompacter is an autogenerated mock type for the Compacter type
type MockCompacter struct {
	mock.Mock
}

// Handler provides a mock function with given fields:
func (_m *MockCompacter) Handler() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Print provides a mock function with given fields: w
func (_m *MockCompacter) Print(w io.Writer) error {
	ret := _m.Called(w)

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Writer) error); ok {
		r0 = rf(w)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Size provides a mock function with given fields: v
func (_m *MockCompacter) Size(v []uint64) (int, bool) {
	ret := _m.Called(v)

	var r0 int
	if rf, ok := ret.Get(0).(func([]uint64) int); ok {
		r0 = rf(v)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func([]uint64) bool); ok {
		r1 = rf(v)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Store provides a mock function with given fields: v
func (_m *MockCompacter) Store(v []uint64) uint32 {
	ret := _m.Called(v)

	var r0 uint32
	if rf, ok := ret.Get(0).(func([]uint64) uint32); ok {
		r0 = rf(v)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}
