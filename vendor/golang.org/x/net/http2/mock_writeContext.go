// Code generated by mockery v1.0.0. DO NOT EDIT.
package http2

import bytes "bytes"
import hpack "golang.org/x/net/http2/hpack"
import mock "github.com/stretchr/testify/mock"

// mockWriteContext is an autogenerated mock type for the writeContext type
type mockWriteContext struct {
	mock.Mock
}

// CloseConn provides a mock function with given fields:
func (_m *mockWriteContext) CloseConn() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Flush provides a mock function with given fields:
func (_m *mockWriteContext) Flush() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Framer provides a mock function with given fields:
func (_m *mockWriteContext) Framer() *Framer {
	ret := _m.Called()

	var r0 *Framer
	if rf, ok := ret.Get(0).(func() *Framer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Framer)
		}
	}

	return r0
}

// HeaderEncoder provides a mock function with given fields:
func (_m *mockWriteContext) HeaderEncoder() (*hpack.Encoder, *bytes.Buffer) {
	ret := _m.Called()

	var r0 *hpack.Encoder
	if rf, ok := ret.Get(0).(func() *hpack.Encoder); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hpack.Encoder)
		}
	}

	var r1 *bytes.Buffer
	if rf, ok := ret.Get(1).(func() *bytes.Buffer); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*bytes.Buffer)
		}
	}

	return r0, r1
}
