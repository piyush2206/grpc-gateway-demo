// Code generated by mockery v1.0.0. DO NOT EDIT.
package proto

import mock "github.com/stretchr/testify/mock"
import sync "sync"

// mockExtendableProto is an autogenerated mock type for the extendableProto type
type mockExtendableProto struct {
	mock.Mock
}

// extensionsRead provides a mock function with given fields:
func (_m *mockExtendableProto) extensionsRead() (map[int32]Extension, sync.Locker) {
	ret := _m.Called()

	var r0 map[int32]Extension
	if rf, ok := ret.Get(0).(func() map[int32]Extension); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int32]Extension)
		}
	}

	var r1 sync.Locker
	if rf, ok := ret.Get(1).(func() sync.Locker); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(sync.Locker)
		}
	}

	return r0, r1
}

// extensionsWrite provides a mock function with given fields:
func (_m *mockExtendableProto) extensionsWrite() map[int32]Extension {
	ret := _m.Called()

	var r0 map[int32]Extension
	if rf, ok := ret.Get(0).(func() map[int32]Extension); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int32]Extension)
		}
	}

	return r0
}

// ExtensionRangeArray provides a mock function with given fields:
func (_m *mockExtendableProto) ExtensionRangeArray() []ExtensionRange {
	ret := _m.Called()

	var r0 []ExtensionRange
	if rf, ok := ret.Get(0).(func() []ExtensionRange); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ExtensionRange)
		}
	}

	return r0
}

// ProtoMessage provides a mock function with given fields:
func (_m *mockExtendableProto) ProtoMessage() {
	_m.Called()
}

// Reset provides a mock function with given fields:
func (_m *mockExtendableProto) Reset() {
	_m.Called()
}

// String provides a mock function with given fields:
func (_m *mockExtendableProto) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
