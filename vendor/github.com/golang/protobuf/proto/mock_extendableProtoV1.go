// Code generated by mockery v1.0.0. DO NOT EDIT.
package proto

import mock "github.com/stretchr/testify/mock"

// mockExtendableProtoV1 is an autogenerated mock type for the extendableProtoV1 type
type mockExtendableProtoV1 struct {
	mock.Mock
}

// ExtensionMap provides a mock function with given fields:
func (_m *mockExtendableProtoV1) ExtensionMap() map[int32]Extension {
	ret := _m.Called()

	var r0 map[int32]Extension
	if rf, ok := ret.Get(0).(func() map[int32]Extension); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int32]Extension)
		}
	}

	return r0
}

// ExtensionRangeArray provides a mock function with given fields:
func (_m *mockExtendableProtoV1) ExtensionRangeArray() []ExtensionRange {
	ret := _m.Called()

	var r0 []ExtensionRange
	if rf, ok := ret.Get(0).(func() []ExtensionRange); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ExtensionRange)
		}
	}

	return r0
}

// ProtoMessage provides a mock function with given fields:
func (_m *mockExtendableProtoV1) ProtoMessage() {
	_m.Called()
}

// Reset provides a mock function with given fields:
func (_m *mockExtendableProtoV1) Reset() {
	_m.Called()
}

// String provides a mock function with given fields:
func (_m *mockExtendableProtoV1) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
