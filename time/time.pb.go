// Code generated by protoc-gen-go. DO NOT EDIT.
// source: time.proto

package time

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ReqTimezone struct {
	Time                 string   `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	Zone                 string   `protobuf:"bytes,2,opt,name=zone,proto3" json:"zone,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqTimezone) Reset()         { *m = ReqTimezone{} }
func (m *ReqTimezone) String() string { return proto.CompactTextString(m) }
func (*ReqTimezone) ProtoMessage()    {}
func (*ReqTimezone) Descriptor() ([]byte, []int) {
	return fileDescriptor_time_b9204b2992e34014, []int{0}
}
func (m *ReqTimezone) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqTimezone.Unmarshal(m, b)
}
func (m *ReqTimezone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqTimezone.Marshal(b, m, deterministic)
}
func (dst *ReqTimezone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqTimezone.Merge(dst, src)
}
func (m *ReqTimezone) XXX_Size() int {
	return xxx_messageInfo_ReqTimezone.Size(m)
}
func (m *ReqTimezone) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqTimezone.DiscardUnknown(m)
}

var xxx_messageInfo_ReqTimezone proto.InternalMessageInfo

func (m *ReqTimezone) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *ReqTimezone) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

type ResTimezone struct {
	Time                 string   `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResTimezone) Reset()         { *m = ResTimezone{} }
func (m *ResTimezone) String() string { return proto.CompactTextString(m) }
func (*ResTimezone) ProtoMessage()    {}
func (*ResTimezone) Descriptor() ([]byte, []int) {
	return fileDescriptor_time_b9204b2992e34014, []int{1}
}
func (m *ResTimezone) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResTimezone.Unmarshal(m, b)
}
func (m *ResTimezone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResTimezone.Marshal(b, m, deterministic)
}
func (dst *ResTimezone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResTimezone.Merge(dst, src)
}
func (m *ResTimezone) XXX_Size() int {
	return xxx_messageInfo_ResTimezone.Size(m)
}
func (m *ResTimezone) XXX_DiscardUnknown() {
	xxx_messageInfo_ResTimezone.DiscardUnknown(m)
}

var xxx_messageInfo_ResTimezone proto.InternalMessageInfo

func (m *ResTimezone) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func init() {
	proto.RegisterType((*ReqTimezone)(nil), "time.ReqTimezone")
	proto.RegisterType((*ResTimezone)(nil), "time.ResTimezone")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TimeClient is the client API for Time service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TimeClient interface {
	Timezone(ctx context.Context, in *ReqTimezone, opts ...grpc.CallOption) (*ResTimezone, error)
}

type timeClient struct {
	cc *grpc.ClientConn
}

func NewTimeClient(cc *grpc.ClientConn) TimeClient {
	return &timeClient{cc}
}

func (c *timeClient) Timezone(ctx context.Context, in *ReqTimezone, opts ...grpc.CallOption) (*ResTimezone, error) {
	out := new(ResTimezone)
	err := c.cc.Invoke(ctx, "/time.Time/Timezone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimeServer is the server API for Time service.
type TimeServer interface {
	Timezone(context.Context, *ReqTimezone) (*ResTimezone, error)
}

func RegisterTimeServer(s *grpc.Server, srv TimeServer) {
	s.RegisterService(&_Time_serviceDesc, srv)
}

func _Time_Timezone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqTimezone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeServer).Timezone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/time.Time/Timezone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeServer).Timezone(ctx, req.(*ReqTimezone))
	}
	return interceptor(ctx, in, info, handler)
}

var _Time_serviceDesc = grpc.ServiceDesc{
	ServiceName: "time.Time",
	HandlerType: (*TimeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Timezone",
			Handler:    _Time_Timezone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "time.proto",
}

func init() { proto.RegisterFile("time.proto", fileDescriptor_time_b9204b2992e34014) }

var fileDescriptor_time_b9204b2992e34014 = []byte{
	// 157 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0xc9, 0xcc, 0x4d,
	0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0xa5, 0x64, 0xd2, 0xf3, 0xf3, 0xd3,
	0x73, 0x52, 0xf5, 0x13, 0x0b, 0x32, 0xf5, 0x13, 0xf3, 0xf2, 0xf2, 0x4b, 0x12, 0x4b, 0x32, 0xf3,
	0xf3, 0x8a, 0x21, 0x6a, 0x94, 0x4c, 0xb9, 0xb8, 0x83, 0x52, 0x0b, 0x43, 0x32, 0x73, 0x53, 0xab,
	0xf2, 0xf3, 0x52, 0x85, 0x84, 0xb8, 0xc0, 0x9a, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xc0,
	0x6c, 0x90, 0x18, 0x48, 0x4e, 0x82, 0x09, 0x22, 0x06, 0x62, 0x2b, 0x29, 0x82, 0xb4, 0x15, 0xe3,
	0xd3, 0x66, 0x14, 0xc0, 0xc5, 0x02, 0x92, 0x17, 0xf2, 0xe0, 0xe2, 0x80, 0xab, 0x13, 0xd4, 0x03,
	0x3b, 0x0f, 0xc9, 0x46, 0x29, 0xb8, 0x10, 0xdc, 0x34, 0x25, 0xb1, 0xa6, 0xcb, 0x4f, 0x26, 0x33,
	0x09, 0x08, 0xf1, 0xe9, 0x83, 0xa4, 0xc0, 0x04, 0x48, 0x3c, 0x89, 0x0d, 0xec, 0x64, 0x63, 0x40,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xad, 0x33, 0xc4, 0x6d, 0xe4, 0x00, 0x00, 0x00,
}
